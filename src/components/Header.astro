---
import type { SectionTitles } from "@/interfaces/translation";
import SettingsToggle from "./SettingsToggle.astro";

interface Props {
  lang: string;
  translation: SectionTitles;
}

const { lang, translation } = Astro.props;
const navItems = [
  {
    title: translation.professionalExperience,
    label: "experience",
    url: "#experience",
  },
  {
    title: translation.technologies,
    label: "technologies",
    url: "#technologies",
  },
  {
    title: translation.aboutMe,
    label: "about",
    url: "#about",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-end justify-self-center-anchor w-full mx-auto mt-2 px-3"
>
  <nav class="flex rounded-xl mx-auto w-full max-w-6xl">
    <div
      class="flex justify-around px-2 text-sm font-medium text-gray-600 dark:text-gray-200 items-center w-full"
    >
      {
        navItems.map((link) => (
          <a
            class="relative block py-2 px-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
      <SettingsToggle lang={lang} />
    </div>
  </nav>
</header>

<script>
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("header nav div a");
  const callback = (entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") == entry.target.id) {
            item.classList.add("text-blue-500");
          } else {
            item.classList.remove("text-blue-500");
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(callback, {
    root: null,
    rootMargin: "0px",
    threshold: 0.3,
  });

  sections.forEach((section) => {
    observer.observe(section);
  });

  // Cleanup function
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>

<style>
  nav {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  .header-text {
    animation: header-text-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 1000px;
  }

  nav {
    @apply dark:bg-zinc-800/90 bg-white/50;
  }

  @keyframes nav-shadow {
    0% {
      @apply dark:bg-zinc-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }

  @keyframes header-text-shadow {
    0% {
      opacity: 0;
    }
    80% {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
